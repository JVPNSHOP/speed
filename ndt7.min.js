/*! patched ndt7.js | M-Lab ndt7 client | fixed url field */
(function(g,f){typeof exports==="object"&&typeof module!=="undefined"?module.exports=f():typeof define==="function"&&define.amd?define(f):(g=typeof globalThis!=="undefined"?globalThis:g||self,g.ndt7=f());})(this,function(){"use strict";
function test(options,callbacks){
 if(typeof options!=="object") throw new Error("options must be an object");
 if(!options.userAcceptedDataPolicy) throw new Error("User must accept data policy");
 callbacks=callbacks||{};
 const locateURL="https://locate.measurementlab.net/v2/nearest/ndt/ndt7";
 const now=()=>performance.now();
 const mbps=(bits,ms)=>bits/(ms/1e3)/1e6;
 function pickServer(){
   return fetch(locateURL).then(r=>r.json()).then(d=>{
     if(!d.results||!d.results.length) throw new Error("no servers");
     const s=d.results[0];
     if(callbacks.serverChosen) callbacks.serverChosen(s);
     return s;
   });
 }
 function runDownload(url){
   return new Promise(res=>{
     const ws=new WebSocket(url,"net.measurementlab.ndt.v7");
     let start=0,bytes=0;
     ws.onopen=()=>{start=now();ws.send(JSON.stringify({msg:"start"}));};
     ws.onmessage=e=>{
       if(typeof e.data!=="string"){bytes+=e.data.byteLength;
         const rate=mbps(bytes*8,now()-start);
         if(callbacks.downloadMeasurement)callbacks.downloadMeasurement({Source:"client",Data:{MeanClientMbps:rate}});
       }else{
         try{const m=JSON.parse(e.data);
             if(m.Data&&callbacks.downloadMeasurement)callbacks.downloadMeasurement(m);
         }catch{}
       }};
     ws.onerror=er=>callbacks.error&&callbacks.error(er);
     ws.onclose=()=>res({LastClientMeasurement:{MeanClientMbps:mbps(bytes*8,now()-start)}});
   });
 }
 function runUpload(url){
   return new Promise(res=>{
     const ws=new WebSocket(url,"net.measurementlab.ndt.v7");
     const buf=new ArrayBuffer(8192);
     let start=0,bytes=0;
     ws.onopen=()=>{
       start=now();
       const interval=setInterval(()=>{
         try{ws.send(buf);bytes+=buf.byteLength;}catch{clearInterval(interval);}
       },0);
       setTimeout(()=>{clearInterval(interval);ws.close();},10000);
     };
     ws.onmessage=e=>{
       try{const m=JSON.parse(e.data);
         if(m.Data&&callbacks.uploadMeasurement)callbacks.uploadMeasurement(m);
       }catch{}
     };
     ws.onerror=er=>callbacks.error&&callbacks.error(er);
     ws.onclose=()=>res({LastServerMeasurement:{TCPInfo:{BytesReceived:bytes,ElapsedTime:(now()-start)*1000}}});
   });
 }
 return pickServer().then(s=>{
   // âœ… new API: some responses use 'urls' others use 'urls_ndt7' or 'urls_ws'
   let durl,uurl;
   if(s.urls&&s.urls.length){durl=s.urls[0].url+"download";uurl=s.urls[0].url+"upload";}
   else if(s.urls_ws&&s.urls_ws.length){durl=s.urls_ws[0]+"download";uurl=s.urls_ws[0]+"upload";}
   else if(s.location&&s.machine){ // fallback compose
     const base="wss://"+s.machine;
     durl=base+"/ndt/v7/download";
     uurl=base+"/ndt/v7/upload";
   }else throw new Error("Server URL not found");
   return runDownload(durl).then(dr=>{
     callbacks.downloadComplete&&callbacks.downloadComplete(dr);
     return runUpload(uurl);
   }).then(ur=>{
     callbacks.uploadComplete&&callbacks.uploadComplete(ur);
     return{download:dr,upload:ur};
   });
 });
}
return{test};
});
