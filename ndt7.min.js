/*! ndt7.js | M-Lab ndt7 client | https://www.measurementlab.net/ */
(function(global,factory){typeof exports==="object"&&typeof module!=="undefined"?module.exports=factory():typeof define==="function"&&define.amd?define(factory):(global=typeof globalThis!=="undefined"?globalThis:global||self,global.ndt7=factory());})(this,function(){"use strict";function test(options,callbacks){if(typeof options!=="object"){throw new Error("options must be an object")}if(!options.userAcceptedDataPolicy){throw new Error("User must accept M-Lab data policy.")}callbacks=callbacks||{};function log(msg){if(console&&console.log){console.log("[ndt7]",msg)}}const mlabNS="https://locate.measurementlab.net/v2/nearest/ndt/ndt7";function fetchServer(){return fetch(mlabNS).then(r=>{if(!r.ok){throw new Error("locate.measurementlab.net failed")}return r.json()}).then(data=>{if(!data.results||!data.results[0]){throw new Error("no ndt7 servers available")}const s=data.results[0];if(callbacks.serverChosen)callbacks.serverChosen(s);return s})}function mbps(bits,elapsed){return bits/(elapsed/1e3)/1e6}function now(){return performance.now()}function ndt7Download(url){return new Promise(resolve=>{const ws=new WebSocket(url,"net.measurementlab.ndt.v7");let startTime=0,bytesReceived=0;ws.onopen=()=>{startTime=now();ws.send(JSON.stringify({msg:"start"}))};ws.onmessage=event=>{if(typeof event.data==="string"){try{const m=JSON.parse(event.data);if(m.Data&&callbacks.downloadMeasurement){callbacks.downloadMeasurement(m)}}catch(e){}}else{bytesReceived+=event.data.byteLength;const elapsed=now()-startTime;if(callbacks.downloadMeasurement){callbacks.downloadMeasurement({Source:"client",Data:{MeanClientMbps:mbps(bytesReceived*8,elapsed)}})}}};ws.onerror=e=>{if(callbacks.error)callbacks.error(e)};ws.onclose=()=>{resolve({LastClientMeasurement:{MeanClientMbps:mbps(bytesReceived*8,now()-startTime)}})};});}function ndt7Upload(url){return new Promise(resolve=>{const ws=new WebSocket(url,"net.measurementlab.ndt.v7");const buf=new ArrayBuffer(8192);let startTime=0,bytesSent=0;ws.onopen=()=>{startTime=now();const sendInt=setInterval(()=>{try{ws.send(buf);bytesSent+=buf.byteLength;}catch(e){clearInterval(sendInt);}},0);setTimeout(()=>{clearInterval(sendInt);ws.close();},10000);};ws.onmessage=e=>{try{const m=JSON.parse(e.data);if(m.Data&&callbacks.uploadMeasurement){callbacks.uploadMeasurement(m)}}catch(err){}};ws.onerror=e=>{if(callbacks.error)callbacks.error(e)};ws.onclose=()=>{resolve({LastServerMeasurement:{TCPInfo:{BytesReceived:bytesSent,ElapsedTime:(now()-startTime)*1000}}});};});}return fetchServer().then(server=>{const urls={download:server.urls[0].url+"download",upload:server.urls[0].url+"upload"};return ndt7Download(urls.download).then(downloadRes=>{if(callbacks.downloadComplete)callbacks.downloadComplete(downloadRes);return ndt7Upload(urls.upload)}).then(uploadRes=>{if(callbacks.uploadComplete)callbacks.uploadComplete(uploadRes);return{download:downloadRes,upload:uploadRes}});});}return{test};});
